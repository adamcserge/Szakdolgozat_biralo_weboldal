require("dotenv").config();
const express = require("express");
const mysql = require("mysql2");
const path = require("path");
const cors = require("cors");

const app = express();
app.use(express.json());
app.use(cors()); // Ha szÃ¼ksÃ©ges, engedÃ©lyezzÃ¼k a CORS-t mÃ¡s domain-ek szÃ¡mÃ¡ra

// MySQL kapcsolat beÃ¡llÃ­tÃ¡sa
const db = mysql.createConnection({
  host: process.env.DB_HOST,
  user: process.env.DB_USER,
  password: process.env.DB_PASS,
  database: process.env.DB_NAME,
  port: process.env.DB_PORT || 3306,
});

db.connect((err) => {
  if (err) {
    console.error("MySQL kapcsolat sikertelen:", err);
    return;
  }
  console.log("âœ… MySQL kapcsolat sikeres");
});

// API vÃ©gpont: lekÃ©rdezi az adatokat a MySQL-bÅ‘l
app.get("/api/hallgatok", (req, res) => {
  db.query("SELECT * FROM hallgato", (err, results) => {
    if (err) {
      res.status(500).send(err);
      return;
    }
    // VisszakÃ¼ldi az adatokat a frontendnek JSON formÃ¡tumban
    res.json(results);
    // KiÃ­rja a lekÃ©rt adatokat a terminÃ¡lba
    console.log("HallgatÃ³k adatainak lekÃ©rdezÃ©se:", results);
  });
});

// Statikus fÃ¡jlok kiszolgÃ¡lÃ¡sa a frontend buildelt fÃ¡jljaibÃ³l
app.use(express.static(path.join(__dirname, "frontend", "dist")));

// Ha nincs talÃ¡lat az API-nÃ¡l, a frontend index.html fÃ¡jlt kÃ¼ldjÃ¼k vissza
app.get("*", (req, res) => {
  res.sendFile(path.join(__dirname, "frontend", "dist", "index.html"));
});

// IndÃ­tsuk el a szervert
const PORT = process.env.PORT || 3000;
app.listen(PORT, () =>
  console.log(`ğŸš€ Backend Ã©s frontend egyesÃ­tve a ${PORT} porton`)
);
